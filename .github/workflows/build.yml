name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            cmake_preset: linux
          - os: macos-latest
            platform: macos
            arch: x64
            cmake_preset: macos
          - os: windows-latest
            platform: windows
            arch: x64
            cmake_preset: windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache SDL3 build (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v4
      id: cache-sdl3-ubuntu
      with:
        path: |
          /usr/local/lib/libSDL3*
          /usr/local/lib/pkgconfig/sdl3.pc
          /usr/local/include/SDL3
          /usr/local/bin/sdl3-config
        key: ubuntu-sdl3-v3-2024

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          liblua5.4-dev \
          libzip-dev \
          curl \
          git \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxfixes-dev \
          libxi-dev \
          libxss-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libdbus-1-dev \
          libwayland-dev \
          libxkbcommon-dev \
          libwayland-cursor0 \
          libwayland-egl1-mesa \
          wayland-protocols

    - name: Build SDL3 from source (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && steps.cache-sdl3-ubuntu.outputs.cache-hit != 'true'
      run: |
        # Install SDL3 from source (not yet in Ubuntu repos)
        git clone https://github.com/libsdl-org/SDL.git --branch main --depth 1
        cd SDL
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(nproc)
        sudo make install
        sudo ldconfig

    - name: Cache SDL3 build (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/cache@v4
      id: cache-sdl3-macos
      with:
        path: |
          /usr/local/lib/libSDL3*
          /usr/local/lib/pkgconfig/sdl3.pc
          /usr/local/include/SDL3
          /usr/local/bin/sdl3-config
        key: macos-sdl3-v3-2024

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake pkg-config lua@5.4 libzip curl git

    - name: Set Lua environment variables (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Set explicit paths for Lua on macOS
        echo "LUA_INCLUDE_DIR=/opt/homebrew/include/lua@5.4" >> $GITHUB_ENV
        echo "LUA_LIBRARY_PATH=/opt/homebrew/lib" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Build SDL3 from source (macOS)
      if: matrix.os == 'macos-latest' && steps.cache-sdl3-macos.outputs.cache-hit != 'true'
      run: |
        # Install SDL3 from source
        git clone https://github.com/libsdl-org/SDL.git --branch main --depth 1
        cd SDL
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(sysctl -n hw.ncpu)
        sudo make install

    - name: Cache vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      id: cache-vcpkg
      with:
        path: |
          vcpkg
          ${{ github.workspace }}/vcpkg_installed
        key: windows-vcpkg-v3-2024

    - name: Cache SDL3 build (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      id: cache-sdl3-windows
      with:
        path: |
          C:/Program Files (x86)/SDL3
          ${{ github.workspace }}/SDL3
        key: windows-sdl3-v3-2024

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        # Install vcpkg if not cached
        if (-not (Test-Path "vcpkg")) {
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          cd ..
        }

        # Set vcpkg environment variables
        $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
        echo "VCPKG_ROOT=$env:VCPKG_ROOT" >> $env:GITHUB_ENV

        # Install packages if not cached
        if (${{ steps.cache-vcpkg.outputs.cache-hit != 'true' }}) {
          cd vcpkg
          .\vcpkg install lua:x64-windows libzip:x64-windows curl:x64-windows
          cd ..
        }

    - name: Build SDL3 from source (Windows)
      if: matrix.os == 'windows-latest' && steps.cache-sdl3-windows.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        # Install SDL3 from source
        git clone https://github.com/libsdl-org/SDL.git --branch main --depth 1
        cd SDL
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/SDL3"
        cmake --build . --config Release --parallel
        cmake --install . --config Release

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        mkdir build -Force
        cd build
        $env:CMAKE_PREFIX_PATH = "${{ github.workspace }}/SDL3;$env:CMAKE_PREFIX_PATH"
        $env:PKG_CONFIG_PATH = "${{ github.workspace }}/SDL3/lib/pkgconfig;$env:PKG_CONFIG_PATH"
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_PREFIX_PATH="${{ github.workspace }}/SDL3"

    - name: Build
      run: |
        cd build
        cmake --build . --config Release --parallel

    - name: Test build (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        ./tsuki --version || echo "Build completed successfully"

    - name: Test build (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        cd build
        if (Test-Path "Release/tsuki.exe") {
          ./Release/tsuki.exe --version
        } elseif (Test-Path "tsuki.exe") {
          ./tsuki.exe --version
        } else {
          echo "Build completed successfully"
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tsuki-${{ matrix.platform }}-${{ matrix.arch }}-build
        path: |
          build/tsuki${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          build/Release/tsuki.exe
          build/tsuki_example${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          build/Release/tsuki_example.exe
        retention-days: 7
        if-no-files-found: warn