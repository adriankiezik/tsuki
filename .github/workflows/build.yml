name: Build

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated)'
        required: true
        type: choice
        default: 'linux,windows'
        options:
          - 'linux'
          - 'windows'
          - 'macos'
          - 'linux,windows'
          - 'linux,macos'
          - 'windows,macos'
          - 'linux,windows,macos'

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            cc: gcc
            cxx: g++
          - os: macos-latest
            platform: macos
            arch: x64
            cc: clang
            cxx: clang++
          - os: windows-latest
            platform: windows
            arch: x64
            cc: cl
            cxx: cl

    steps:
    - name: Check if platform should run
      id: check_platform
      shell: bash
      run: |
        if [[ "${{ github.event.inputs.platforms }}" == *"${{ matrix.platform }}"* ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "should_run=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout code
      if: steps.check_platform.outputs.should_run == 'true'
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    # Cache submodules to avoid re-downloading large repos like SDL3
    - name: Cache submodules
      if: steps.check_platform.outputs.should_run == 'true'
      uses: actions/cache@v4
      with:
        path: |
          vendor/
          .git/modules/
        key: submodules-${{ runner.os }}-${{ hashFiles('.gitmodules') }}
        restore-keys: |
          submodules-${{ runner.os }}-

    # Cache apt packages for Ubuntu
    - name: Cache apt packages
      if: steps.check_platform.outputs.should_run == 'true' && matrix.os == 'ubuntu-latest'
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          apt-${{ runner.os }}-

    # Install Ubuntu dependencies with caching
    - name: Install build dependencies (Ubuntu)
      if: steps.check_platform.outputs.should_run == 'true' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential cmake ninja-build ccache \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev \
          libxss-dev libxxf86vm-dev libxfixes-dev libwayland-dev libxkbcommon-dev \
          libegl1-mesa-dev libgl1-mesa-dev libgles2-mesa-dev

    # Install macOS dependencies with caching
    - name: Cache Homebrew
      if: steps.check_platform.outputs.should_run == 'true' && matrix.os == 'macos-latest'
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
          /usr/local/Homebrew
        key: brew-${{ runner.os }}-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          brew-${{ runner.os }}-

    - name: Install build tools (macOS)
      if: steps.check_platform.outputs.should_run == 'true' && matrix.os == 'macos-latest'
      run: |
        # Use ninja for faster builds
        brew install ninja ccache

    # Setup ccache for faster incremental builds
    - name: Setup ccache
      if: steps.check_platform.outputs.should_run == 'true' && matrix.os != 'windows-latest'
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-${{ matrix.os }}-${{ matrix.cc }}-${{ github.sha }}
        restore-keys: |
          ccache-${{ matrix.os }}-${{ matrix.cc }}-

    - name: Configure ccache
      if: steps.check_platform.outputs.should_run == 'true' && matrix.os != 'windows-latest'
      run: |
        ccache --set-config=cache_dir=~/.ccache
        ccache --set-config=max_size=500M
        ccache --set-config=compression=true
        ccache --zero-stats

    # Cache CMake build directory
    - name: Cache CMake build
      if: steps.check_platform.outputs.should_run == 'true'
      uses: actions/cache@v4
      with:
        path: |
          build/
          !build/tsuki*
          !build/Release/
        key: cmake-${{ matrix.os }}-${{ hashFiles('**/CMakeLists.txt', 'vendor/**') }}
        restore-keys: |
          cmake-${{ matrix.os }}-

    - name: Configure CMake
      if: steps.check_platform.outputs.should_run == 'true'
      shell: bash
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        mkdir -p build
        cd build
        # Use Ninja for faster builds on Linux/macOS, and enable compiler caching
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=OFF
        else
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_VERBOSE_MAKEFILE=OFF
        fi

    - name: Build
      if: steps.check_platform.outputs.should_run == 'true'
      shell: bash
      run: |
        cd build
        # Use all available CPU cores and enable parallelization
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cmake --build . --config Release --parallel
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          ninja -j$(sysctl -n hw.logicalcpu)
        else
          ninja -j$(nproc)
        fi

    - name: Show ccache stats
      if: steps.check_platform.outputs.should_run == 'true' && matrix.os != 'windows-latest'
      run: ccache --show-stats

    - name: Test build
      if: steps.check_platform.outputs.should_run == 'true'
      shell: bash
      run: |
        cd build
        # Test that executables were built successfully
        ls -la tsuki* || ls -la Release/tsuki* || echo "Build completed successfully"

    - name: Upload build artifacts
      if: steps.check_platform.outputs.should_run == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: tsuki-${{ matrix.platform }}-${{ matrix.arch }}-build
        path: |
          build/tsuki${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          build/Release/tsuki.exe
        retention-days: 7
        if-no-files-found: warn