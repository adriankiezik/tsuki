name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: true
        type: boolean
        default: true

jobs:
  build-and-release:
    name: Build and Release ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: tsuki
            bundle_script: bundle-linux.sh
          - os: macos-latest
            platform: macos
            arch: x64
            binary_name: tsuki
            bundle_script: bundle-macos.sh
          - os: windows-latest
            platform: windows
            arch: x64
            binary_name: tsuki.exe
            bundle_script: bundle-windows.ps1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi

    - name: Cache SDL3 build (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v4
      id: cache-sdl3-ubuntu
      with:
        path: /usr/local
        key: ${{ runner.os }}-sdl3-v2-${{ hashFiles('.github/workflows/release.yml') }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          liblua5.4-dev \
          libzip-dev \
          curl \
          git \
          zip \
          patchelf \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxfixes-dev \
          libxi-dev \
          libxss-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libdbus-1-dev \
          libwayland-dev \
          libxkbcommon-dev \
          libwayland-cursor0 \
          libwayland-egl1-mesa \
          wayland-protocols

    - name: Build SDL3 from source (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && steps.cache-sdl3-ubuntu.outputs.cache-hit != 'true'
      run: |
        # Install SDL3 from source
        git clone https://github.com/libsdl-org/SDL.git --branch main --depth 1
        cd SDL
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(nproc)
        sudo make install
        sudo ldconfig

    - name: Cache SDL3 build (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/cache@v4
      id: cache-sdl3-macos
      with:
        path: /usr/local
        key: ${{ runner.os }}-sdl3-v2-${{ hashFiles('.github/workflows/release.yml') }}

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake pkg-config lua@5.4 libzip curl git zip

        # Link lua@5.4 to make headers available in standard paths
        brew unlink lua || true
        brew link --force lua@5.4

    - name: Build SDL3 from source (macOS)
      if: matrix.os == 'macos-latest' && steps.cache-sdl3-macos.outputs.cache-hit != 'true'
      run: |
        # Install SDL3 from source
        git clone https://github.com/libsdl-org/SDL.git --branch main --depth 1
        cd SDL
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(sysctl -n hw.ncpu)
        sudo make install

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        # Install vcpkg
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg install lua:x64-windows libzip:x64-windows curl:x64-windows

        # Install SDL3 from source
        git clone https://github.com/libsdl-org/SDL.git --branch main --depth 1
        cd SDL
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake
        cmake --build . --config Release
        cmake --install . --config Release

    - name: Build
      shell: bash
      run: |
        mkdir build
        cd build
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
          cmake --build . --config Release -j
        else
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . -j
        fi

    - name: Create bundle directory
      shell: bash
      run: |
        mkdir -p release-bundle

    - name: Bundle Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Copy main executable
        cp build/tsuki release-bundle/

        # Copy required libraries
        mkdir -p release-bundle/lib

        # Copy SDL3 libraries
        cp /usr/local/lib/libSDL3*.so* release-bundle/lib/ || true

        # Copy system libraries that might not be available everywhere
        ldd build/tsuki | grep "=>" | awk '{print $3}' | grep -E "(lua|zip)" | xargs -I {} cp {} release-bundle/lib/ || true

        # Create launcher script
        cat > release-bundle/tsuki.sh << 'EOF'
        #!/bin/bash
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$LD_LIBRARY_PATH"
        exec "$SCRIPT_DIR/tsuki" "$@"
        EOF
        chmod +x release-bundle/tsuki.sh

        # Make main binary executable
        chmod +x release-bundle/tsuki

    - name: Bundle macOS
      if: matrix.os == 'macos-latest'
      run: |
        # Create app bundle structure
        mkdir -p "release-bundle/Tsuki.app/Contents/MacOS"
        mkdir -p "release-bundle/Tsuki.app/Contents/Resources"

        # Copy executable
        cp build/tsuki "release-bundle/Tsuki.app/Contents/MacOS/"

        # Copy libraries using otool and install_name_tool
        libs=$(otool -L build/tsuki | grep -E "(SDL|lua|zip)" | awk '{print $1}' | grep -v "@executable_path")
        for lib in $libs; do
          if [[ -f "$lib" ]]; then
            cp "$lib" "release-bundle/Tsuki.app/Contents/MacOS/"
            libname=$(basename "$lib")
            install_name_tool -change "$lib" "@executable_path/$libname" "release-bundle/Tsuki.app/Contents/MacOS/tsuki"
          fi
        done

        # Create Info.plist
        cat > "release-bundle/Tsuki.app/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>tsuki</string>
            <key>CFBundleIdentifier</key>
            <string>com.tsuki.engine</string>
            <key>CFBundleName</key>
            <string>Tsuki</string>
            <key>CFBundleVersion</key>
            <string>${{ env.VERSION }}</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ env.VERSION }}</string>
        </dict>
        </plist>
        EOF

        # Also create standalone binary for CLI usage
        cp build/tsuki release-bundle/

    - name: Bundle Windows
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        # Copy main executable
        Copy-Item "build/Release/tsuki.exe" "release-bundle/"

        # Copy SDL3 DLLs
        $sdlPath = "SDL/build/Release"
        if (Test-Path "$sdlPath/SDL3.dll") {
          Copy-Item "$sdlPath/SDL3.dll" "release-bundle/"
        }

        # Copy vcpkg DLLs
        $vcpkgBin = "vcpkg/installed/x64-windows/bin"
        if (Test-Path $vcpkgBin) {
          Get-ChildItem "$vcpkgBin/*.dll" | ForEach-Object {
            Copy-Item $_.FullName "release-bundle/"
          }
        }

        # Copy Windows runtime DLLs (if needed)
        # Note: These might need to be installed separately or bundled differently

    - name: Create release archive
      shell: bash
      run: |
        cd release-bundle
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a "../tsuki-${{ matrix.platform }}-${{ matrix.arch }}.zip" *
        else
          zip -r "../tsuki-${{ matrix.platform }}-${{ matrix.arch }}.zip" *
        fi

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: tsuki-${{ matrix.platform }}-${{ matrix.arch }}
        path: tsuki-${{ matrix.platform }}-${{ matrix.arch }}.zip
        retention-days: 30

    - name: Upload to release
      if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Tsuki Engine ${{ env.VERSION }}
        body: |
          ## Tsuki Engine ${{ env.VERSION }}

          Cross-platform game engine binaries for Linux, macOS, and Windows.

          ### Installation

          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Run `tsuki --help` to get started

          ### Usage

          ```bash
          # Run a game from directory
          ./tsuki mygame/

          # Package a game
          ./tsuki --package mygame/ mygame.tsuki

          # Create standalone executable
          ./tsuki --fuse mygame.tsuki mygame_standalone

          # Cross-platform fusion (Linux to Windows)
          ./tsuki --fuse mygame.tsuki mygame.exe --target windows
          ```

          ### Files Included

          - **Linux**: `tsuki` binary with bundled libraries
          - **macOS**: `Tsuki.app` bundle + standalone `tsuki` binary
          - **Windows**: `tsuki.exe` with required DLLs
        files: |
          tsuki-${{ matrix.platform }}-${{ matrix.arch }}.zip
        draft: false
        prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}