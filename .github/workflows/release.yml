name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: true
        type: boolean
        default: true

jobs:
  # Reuse the optimized build workflow
  build:
    uses: ./.github/workflows/build.yml

  # Bundle and release the artifacts
  release:
    name: Create Release ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: tsuki
          - os: macos-latest
            platform: macos
            arch: x64
            binary_name: tsuki
          - os: windows-latest
            platform: windows
            arch: x64
            binary_name: tsuki.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Set version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi

    # Download build artifacts from the build job
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: tsuki-${{ matrix.platform }}-${{ matrix.arch }}-build
        path: ./build/

    - name: Create bundle directory
      shell: bash
      run: mkdir -p release-bundle

    - name: Bundle executables
      shell: bash
      run: |
        # Find and copy the built executable
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Windows build output is in Release subdirectory
          find build/ -name "*.exe" -type f -exec cp {} release-bundle/ \;
        else
          # Linux/macOS executables (without extension)
          find build/ -name "tsuki" -type f -executable -exec cp {} release-bundle/ \;
          find build/ -name "tsuki_example" -type f -executable -exec cp {} release-bundle/ \; || true
          chmod +x release-bundle/tsuki*
        fi

    - name: Create macOS app bundle
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # Create a simple .app bundle structure
        mkdir -p "release-bundle/Tsuki.app/Contents/MacOS"
        mkdir -p "release-bundle/Tsuki.app/Contents/Resources"

        # Copy executable to app bundle
        cp release-bundle/tsuki "release-bundle/Tsuki.app/Contents/MacOS/"

        # Create basic Info.plist
        cat > "release-bundle/Tsuki.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>tsuki</string>
            <key>CFBundleIdentifier</key>
            <string>com.tsuki.engine</string>
            <key>CFBundleName</key>
            <string>Tsuki</string>
            <key>CFBundleVersion</key>
            <string>${{ env.VERSION }}</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ env.VERSION }}</string>
        </dict>
        </plist>
        EOF

    - name: Create README
      shell: bash
      run: |
        cat > release-bundle/README.txt << 'EOF'
        Tsuki Engine ${{ env.VERSION }}
        ============================

        Cross-platform game engine for creating interactive applications.

        Quick Start:
        -----------

        Linux/macOS:   ./tsuki --help
        Windows:       tsuki.exe --help
        macOS App:     Open Tsuki.app or use ./tsuki for CLI

        Visit https://github.com/adriankiezik/tsuki for documentation.
        EOF

    - name: Create release archive
      shell: bash
      run: |
        cd release-bundle
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Use PowerShell's Compress-Archive for Windows
          powershell -Command "Compress-Archive -Path * -DestinationPath '../tsuki-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.zip'"
        else
          zip -r "../tsuki-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.zip" .
        fi

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: tsuki-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}
        path: tsuki-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.zip
        retention-days: 30

  # Create GitHub release (runs after all platforms are bundled)
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: release
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')

    steps:
    - name: Set version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi

    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: tsuki-${{ env.VERSION }}-*
        path: ./release-assets/
        merge-multiple: true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.VERSION }}
        name: Tsuki Engine ${{ env.VERSION }}
        body: |
          ## Tsuki Engine ${{ env.VERSION }}

          Cross-platform game engine binaries for Linux, macOS, and Windows.

          ### ðŸ“¦ Downloads

          Choose the appropriate binary for your platform:
          - **Linux**: `tsuki-${{ env.VERSION }}-linux-x64.zip`
          - **macOS**: `tsuki-${{ env.VERSION }}-macos-x64.zip`
          - **Windows**: `tsuki-${{ env.VERSION }}-windows-x64.zip`

          ### ðŸš€ Quick Start

          1. Download and extract the archive for your platform
          2. Run `./tsuki --help` (or `tsuki.exe --help` on Windows)
          3. Check out the [documentation](https://github.com/adriankiezik/tsuki) for examples

          ### ðŸ“‹ What's Included

          - **Linux**: `tsuki` binary (statically linked)
          - **macOS**: `tsuki` CLI + `Tsuki.app` bundle
          - **Windows**: `tsuki.exe` with required DLLs

          Built with the optimized CI pipeline for reliable cross-platform compatibility.
        files: ./release-assets/*.zip
        draft: false
        prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}