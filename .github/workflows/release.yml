name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: true
        type: boolean
        default: true

jobs:
  # Build using same optimized steps as build.yml (but skip the conditional check for releases)
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            cc: gcc
            cxx: g++
          - os: macos-latest
            platform: macos
            arch: x64
            cc: clang
            cxx: clang++
          - os: windows-latest
            platform: windows
            arch: x64
            cc: cl
            cxx: cl

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    # Reuse all the caching and build optimizations from build.yml
    - name: Cache submodules
      uses: actions/cache@v4
      with:
        path: |
          vendor/
          .git/modules/
        key: submodules-${{ runner.os }}-${{ hashFiles('.gitmodules') }}
        restore-keys: |
          submodules-${{ runner.os }}-

    - name: Cache apt packages
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/release.yml') }}
        restore-keys: |
          apt-${{ runner.os }}-

    - name: Install build dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential cmake ninja-build ccache \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev \
          libxss-dev libxxf86vm-dev libxfixes-dev libwayland-dev libxkbcommon-dev \
          libegl1-mesa-dev libgl1-mesa-dev libgles2-mesa-dev

    - name: Cache Homebrew
      if: matrix.os == 'macos-latest'
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
          /usr/local/Homebrew
        key: brew-${{ runner.os }}-${{ hashFiles('.github/workflows/release.yml') }}
        restore-keys: |
          brew-${{ runner.os }}-

    - name: Install build tools (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja ccache

    - name: Setup ccache
      if: matrix.os != 'windows-latest'
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-${{ matrix.os }}-${{ matrix.cc }}-${{ github.sha }}
        restore-keys: |
          ccache-${{ matrix.os }}-${{ matrix.cc }}-

    - name: Configure ccache
      if: matrix.os != 'windows-latest'
      run: |
        ccache --set-config=cache_dir=~/.ccache
        ccache --set-config=max_size=500M
        ccache --set-config=compression=true
        ccache --zero-stats

    - name: Cache CMake build
      uses: actions/cache@v4
      with:
        path: |
          build/
          !build/tsuki*
          !build/Release/
        key: cmake-${{ matrix.os }}-${{ hashFiles('**/CMakeLists.txt', 'vendor/**') }}
        restore-keys: |
          cmake-${{ matrix.os }}-

    - name: Configure CMake
      shell: bash
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        mkdir -p build
        cd build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=OFF
        else
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_VERBOSE_MAKEFILE=OFF
        fi

    - name: Build
      shell: bash
      run: |
        cd build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cmake --build . --config Release --parallel
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          ninja -j$(sysctl -n hw.logicalcpu)
        else
          ninja -j$(nproc)
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tsuki-${{ matrix.platform }}-${{ matrix.arch }}-build
        path: |
          build/tsuki${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          build/Release/tsuki.exe
          build/tsuki_example${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          build/Release/tsuki_example.exe
        retention-days: 7
        if-no-files-found: warn

  # Bundle and release the artifacts
  bundle-linux:
    name: Bundle Linux Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Set version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: tsuki-linux-x64-build
        path: ./build/

    - name: Create bundle directory
      run: mkdir -p release-bundle

    - name: Bundle Linux executable
      shell: bash
      run: |
        # Copy binaries (they exist but may not have execute permissions in artifacts)
        find build/ -name "tsuki" -type f -exec cp {} release-bundle/ \; || echo "No tsuki binary found"
        find build/ -name "tsuki_example" -type f -exec cp {} release-bundle/ \; || echo "No example binary found"

        # Set execute permissions
        if [ -f release-bundle/tsuki ]; then
          chmod +x release-bundle/tsuki*
          echo "✅ Successfully bundled Linux executables"
          ls -la release-bundle/
        else
          echo "ERROR: No executables found in build artifacts"
          ls -la build/
          exit 1
        fi

    - name: Create README
      shell: bash
      run: |
        cat > release-bundle/README.txt << 'EOF'
        Tsuki Engine ${{ env.VERSION }} - Linux
        ===================================

        Quick Start: ./tsuki --help
        EOF

    - name: Create release archive
      shell: bash
      run: |
        cd release-bundle
        zip -r "../tsuki-${{ env.VERSION }}-linux-x64.zip" .

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: tsuki-${{ env.VERSION }}-linux-x64
        path: tsuki-${{ env.VERSION }}-linux-x64.zip

  bundle-macos:
    name: Bundle macOS Release
    runs-on: macos-latest
    needs: build
    steps:
    - name: Set version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: tsuki-macos-x64-build
        path: ./build/

    - name: Create bundle directory
      run: mkdir -p release-bundle

    - name: Bundle macOS executable
      shell: bash
      run: |
        # Copy binaries (macOS find doesn't support -executable flag)
        find build/ -name "tsuki" -type f -exec cp {} release-bundle/ \; || echo "No tsuki binary found"
        find build/ -name "tsuki_example" -type f -exec cp {} release-bundle/ \; || echo "No example binary found"

        # Set execute permissions
        if [ -f release-bundle/tsuki ]; then
          chmod +x release-bundle/tsuki*
          echo "✅ Successfully bundled macOS executables"
          ls -la release-bundle/
        else
          echo "ERROR: No executables found in build artifacts"
          ls -la build/
          exit 1
        fi

    - name: Create macOS app bundle
      shell: bash
      run: |
        mkdir -p "release-bundle/Tsuki.app/Contents/MacOS"
        mkdir -p "release-bundle/Tsuki.app/Contents/Resources"
        cp release-bundle/tsuki "release-bundle/Tsuki.app/Contents/MacOS/"

        cat > "release-bundle/Tsuki.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>tsuki</string>
            <key>CFBundleIdentifier</key>
            <string>com.tsuki.engine</string>
            <key>CFBundleName</key>
            <string>Tsuki</string>
            <key>CFBundleVersion</key>
            <string>${{ env.VERSION }}</string>
        </dict>
        </plist>
        EOF

    - name: Create README
      shell: bash
      run: |
        cat > release-bundle/README.txt << 'EOF'
        Tsuki Engine ${{ env.VERSION }} - macOS
        ====================================

        CLI Usage: ./tsuki --help
        App Usage: Open Tsuki.app
        EOF

    - name: Create release archive
      shell: bash
      run: |
        cd release-bundle
        zip -r "../tsuki-${{ env.VERSION }}-macos-x64.zip" .

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: tsuki-${{ env.VERSION }}-macos-x64
        path: tsuki-${{ env.VERSION }}-macos-x64.zip

  bundle-windows:
    name: Bundle Windows Release
    runs-on: windows-latest
    needs: build
    steps:
    - name: Set version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: tsuki-windows-x64-build
        path: ./build/

    - name: Create bundle directory
      run: mkdir -p release-bundle

    - name: Bundle Windows executable
      shell: bash
      run: |
        # Copy Windows executables
        find build/ -name "*.exe" -type f -exec cp {} release-bundle/ \; || echo "No .exe files found"

        # Check if we got any executables
        if ls release-bundle/*.exe 1> /dev/null 2>&1; then
          echo "✅ Successfully bundled Windows executables"
          ls -la release-bundle/
        else
          echo "ERROR: No executables found in build artifacts"
          ls -la build/
          exit 1
        fi

    - name: Create README
      shell: bash
      run: |
        cat > release-bundle/README.txt << 'EOF'
        Tsuki Engine ${{ env.VERSION }} - Windows
        ======================================

        Quick Start: tsuki.exe --help
        EOF

    - name: Create release archive
      shell: bash
      run: |
        cd release-bundle
        powershell -Command "Compress-Archive -Path * -DestinationPath '../tsuki-${{ env.VERSION }}-windows-x64.zip'"

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: tsuki-${{ env.VERSION }}-windows-x64
        path: tsuki-${{ env.VERSION }}-windows-x64.zip

  # Create GitHub release (runs after all platforms are bundled)
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [bundle-linux, bundle-macos, bundle-windows]
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')

    steps:
    - name: Set version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi

    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: tsuki-${{ env.VERSION }}-*
        path: ./release-assets/
        merge-multiple: true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.VERSION }}
        name: Tsuki Engine ${{ env.VERSION }}
        body: |
          ## Tsuki Engine ${{ env.VERSION }}

          Cross-platform game engine binaries for Linux, macOS, and Windows.

          ### 📦 Downloads

          Choose the appropriate binary for your platform:
          - **Linux**: `tsuki-${{ env.VERSION }}-linux-x64.zip`
          - **macOS**: `tsuki-${{ env.VERSION }}-macos-x64.zip`
          - **Windows**: `tsuki-${{ env.VERSION }}-windows-x64.zip`

          ### 🚀 Quick Start

          1. Download and extract the archive for your platform
          2. Run `./tsuki --help` (or `tsuki.exe --help` on Windows)
          3. Check out the [documentation](https://github.com/adriankiezik/tsuki) for examples

          ### 📋 What's Included

          - **Linux**: `tsuki` binary (statically linked)
          - **macOS**: `tsuki` CLI + `Tsuki.app` bundle
          - **Windows**: `tsuki.exe` with required DLLs

          Built with the optimized CI pipeline for reliable cross-platform compatibility.
        files: ./release-assets/*.zip
        draft: false
        prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}